* Todos
** TODO  Play with color scheme      <2016-09-22 Thu 06:23>
 
Link: file:~/src/side/parens-of-the-dead/src/roam/cards/colors.cljs
** Understand custom layouts
** TODO  distinguish sets and nodes?      <2016-09-26 Mon 06:48>
 
 Link: file:~/src/side/parens-of-the-dead/src/undead/cards/grid.cljs
** TODO  clean up event handler      <2016-09-28 Wed 20:11>
 (defn event-handler [db [event-name & event-vec]]
   (js/console.log (pr-str  db event-name event-vec))
   (case event-name
     :tab-down
     (let [text (:text db)
           [start end] event-vec
           newstring (str (subs text 0 start) "\t"  (subs text end))]
       (js/console.log (pr-str newstring))
         (assoc db :text (str (subs text 0 start) "\t"  (subs text end))))
     ))
 Link: file:~/src/side/parens-of-the-dead/src/undead/cards/grid.cljs::(defn%20event-handler%20%5Bdb%20%5Bevent-name%20&%20event-vec%5D%5D%0A%20(js/console.log%20(pr-str%20db%20event-name%20event-vec))%0A%20(case%20event-name%0A%20:tab-down%0A%20(let%20%5Btext%20(:text%20db)%0A%20%5Bstart%20end%5D%20event-vec%0A%20newstring%20(str%20(subs%20text%200%20start)%20"\t"%20(subs%20text%20end))%5D%0A%20(js/console.log%20(pr-str%20newstring))%0A%20(assoc%20db%20:text%20(str%20(subs%20text%200%20start)%20"\t"%20(subs%20text%20end))))%0A%20))
** TODO  Clean up child types in the transact      <2016-09-30 Fri 20:22>
 
 Link: file:~/src/side/parens-of-the-dead/src/undead/cards/grid.cljs::(defn%20connect-node%20%5Bnode%20children%5D
** TODO  Currently, datascript only pulls nodes apart one level deep, I think      <2016-09-30 Fri 23:11>
 
 Link: file:~/src/side/parens-of-the-dead/src/undead/cards/grid.cljs::(def%20complexparent-test%20"Investor%20Sets\n\tGreat%20Guys\nInvestors\n\tE%20Pluribus\n\t\t<%20Great%20Guys\n\t\t\tElon%20Musk")
** TODO  Figure out Created at      <2016-10-01 Sat 16:45>
 (d/transact! conn [{:name "X"
                                  :created-at :db/current-tx}
                                 {:db/id :db/current-tx
                                  :prop1 "prop1"}
                                 [:db/add :db/current-tx :prop2 "prop2"]
                                 [:db/add -1 :name "Y"]
                                 [:db/add -1 :created-at :db/current-tx]])
 Link: file:~/src/side/parens-of-the-dead/src/undead/cards/grid.cljs::(d/transact!%20conn%20%5B{:name%20"X"%0A%20:created-at%20:db/current-tx}%0A%20{:db/id%20:db/current-tx%0A%20:prop1%20"prop1"}%0A%20%5B:db/add%20:db/current-tx%20:prop2%20"prop2"%5D%0A%20%5B:db/add%20-1%20:name%20"Y"%5D%0A%20%5B:db/add%20-1%20:created-at%20:db/current-tx%5D%5D)
** TODO  got queries      <2016-10-08 Sat 06:50>
 (deftest queries2
   (let [
         q '[:find ?p-names
             :in $ %
             :where
             [?parents :title ?p-names]
             (child ?parents ?c)]
 
         q1 '[:find ?c-title
              :in $ % $titles
              :where
              [$titles ?parent-titles]
              [?p :title ?parent-titles]
              (child ?p ?c)
              [?c :title ?c-title]
              ]]
     (testing "qs"
       (is (= (d/q q parent-child-db simple-child) #{[10]}))
       (is (= (d/q q1 parent-child-db simple-child [["Oct 1"]]) #{["A"]["B"]}))
       )))
 Link: file:~/src/side/parens-of-the-dead/src/undead/cards/search.cljs::(deftest%20queries2%0A%20(let%20%5B%0A%20q%20'%5B:find%20?p-names%0A%20:in%20$%20%25%0A%20:where%0A%20%5B?parents%20:title%20?p-names%5D%0A%20(child%20?parents%20?c)%5D%0A%0A%20q1%20'%5B:find%20?c-title%0A%20:in%20$%20%25%20$titles%0A%20:where%0A%20%5B$titles%20?parent-titles%5D%0A%20%5B?p%20:title%20?parent-titles%5D%0A%20(child%20?p%20?c)%0A%20%5B?c%20:title%20?c-title%5D%0A%20%5D%5D%0A%20(testing%20"qs"%0A%20(is%20(=%20(d/q%20q%20parent-child-db%20simple-child)%20#{%5B10%5D}))%0A%20(is%20(=%20(d/q%20q1%20parent-child-db%20simple-child%20%5B%5B"Oct%201"%5D%5D)%20#{%5B"A"%5D%5B"B"%5D}))%0A%20)))

* log
** October 5, 2016
*** 00:12:18
break

00:15:47


01:16:38
*** looking for clj web scraping

01:16:54
*** try scraping mit with enlive

https://github.com/swannodette/enlive-tutorial
*** videos

04:44:22


*** double slit experiment
https://www.youtube.com/watch?v=A9tKncAdlHQ


https://www.youtube.com/watch?v=J_ozTpZUvs0

*** DONE https://www.youtube.com/watch?v=J_ozTpZUvs0
CLOSED: [2016-10-05 Wed 05:16]


** October 8, 2016 

03:40:32

*** trying new more ergonomic setup with cheapo keyboard\

**** Not having ctrl mapped to capslock is a pain

**** so is the slow responsiveness of the keys
who need to be pushed wayy too far down

**** was able to get it remapped successfully 

just had to select the usb keyboard instead of the 
mac keyboard -- makes a big difference putting cmd and
ctrl in the right place, was really bugging me out before..

sadly don't have a function key, but its cool


*** change fn keys to be useful 
:LOGBOOK:
CLOCK: [2016-10-08 Sat 03:44]--[2016-10-08 Sat 03:48] =>  0:04
:END:

*** break 
:LOGBOOK:
CLOCK: [2016-10-08 Sat 03:48]--[2016-10-08 Sat 05:41] =>  1:53
:END:

included meditation, shower, stretching and reading less wrong

*** tasks
:LOGBOOK:
CLOCK: [2016-10-08 Sat 05:41]--[2016-10-08 Sat 06:12] =>  0:31
:END:

**** Figure out what is wrong with my leg

**** create sample data for  testing this parent/child search

**** figure out how I want to represent dates in the system

***** Generate a list of dates for this week

***** generate a list of days in the month

***** learn all the helper functions -- or the commonly written ones for working with time in cljs

**** create the parent/child search boxes

**** create a view for inputing in text to a node -- full stories

****  get more practice in artist mode to draw quick diagrams in my todos

**** download the anki deck for spaced repetitoin stuff

**** checkout the mobile app for zotero

***** would require

****** reseting my zotero password

**** create an ADD tags, interface at the individual node level --

**** create an add parents, and/or, add children interface at the individual node level

|----------------------     -
-------------
--------------
              +----+
+----+        |    |
|    +--------+----++
|    +        |    |
|   k+lllllll llllll
|    |     |  |    |
|    +     |  +----+
|    |     |
|    |
|    |
|    +-----+



*

***  simple parents and node

** October 11, 2016

*** Color Scheme found

http://www.colorzilla.com/colors/050508+25272E+1D2028+2A2D34+646871+000000+CCCCCC+E3E3E3+F7F7F7+FFFFFF?source-url=burakcan.github.io%252FKangaroo%252F

color palette for http://burakcan.github.io/Kangaroo/

#646871

main aside color

#2A2D34

*** Todays todos

**** What do I want to achieve today

***** A very simple search box

****** Search and filter

****** Show all the parents of the currently visible nodes

****** github icons


Github Octicons icons by Github https://octicons.github.com/

****** log

08:39:04

go to gym now


15:20:38

****** Joy of Clojure

******* macros

******* regex
“Regular expressions accept option flags, shown in table 4.1, that can make a pattern case-insensitive or enable multiline mode. Clojure’s regex literals starting with (?<flag>) set the mode for the rest of the pattern. For example, the pattern #"(?i)yo" matches the strings “yo”, “yO”, “Yo”, and “YO”.

Table 4.1. Flags that can be used in Clojure regular-expression patterns, along with their long name and a description of what they do. See Java’s documentation for the java.util.regex.Pattern class for more details.
Flag

Flag name

Description

d	UNIX_LINES	., ^, and $ match only the Unix line terminator '\n'.
i	CASE_INSENSITIVE	ASCII characters are matched without regard to uppercase or lowercase.
x	COMMENTS	Whitespace and comments in the pattern are ignored.
m	MULTILINE	^ and $ match near line terminators instead of only at the beginning or end of the entire input string.
s	DOTALL	. matches any character including the line terminator.
u	UNICODE_CASE	Causes the i flag to use Unicode case insensitivity instead of ASCII.
”

Excerpt From: Michael Fogus Chris Houser. “The Joy of Clojure, Second Edition.” iBooks.

******** capture groups
“A capturing group (subsegments that are accessible via the returned match object) in the regex causes each returned item to be a vector:

(re-seq #"\w*(\w)" "one-two/three")
;=> (["one" "e"] ["two" "o"] ["three" "e"])”

Excerpt From: Michael Fogus Chris Houser. “The Joy of Clojure, Second Edition.” iBooks.

******* vectors

******** into

“If you already have a vector but want to pour several values into it, then into is your friend:

(let [my-vector [:a :b :c]]
  (into my-vector (range 10)))
;=> [:a :b :c 0 1 2 3 4 5 6 7 8 9]”

Excerpt From: Michael Fogus Chris Houser. “The Joy of Clojure, Second Edition.” iBooks.

******** getting value in

(def a-to-j (vec (map char(range 65 75))))

All three of these do the same work, and each returns \E:

(nth a-to-j 4)
;;=> \E

(get a-to-j 4)
;;=> \E

(a-to-j 4)
;;=> \E”

Excerpt From: Michael Fogus Chris Houser. “The Joy of Clojure, Second Edition.” iBooks.

******** rseq

“(seq a-to-j)
;=> (\A \B \C \D \E \F \G \H \I \J)

(rseq a-to-j)
;=> (\J \I \H \G \F \E \D \C \B \A)”


******** replace

“(replace {2 :a, 4 :b} [1 2 3 2 3 4])
;=> [1 :a 3 :a 3 :b]”

******** update-in, assoc-in, get-in

“(def matrix
     [[1 2 3]

      [4 5 6]
      [7 8 9]])”


(update-in matrix [1 2] * 100)
;=> [[1 2 3] [4 5 600] [7 8 9]]

******** neighbors

(def neighbors
([size yx] (neighbors [[-1 0] [1 0] [0 -1] [0 1]]
size
yx))

([deltas size yx]
(filter (fn [new-yx]
(every? #(< -1 % size) new-yx))
(map #(vec (map + yx %)) deltas))))

“The deltas local describes that a neighbor can be one spot away, but only along the x or y axis (not diagonally). The function first walks through deltas and builds a vector of each added to the yx point provided. This operation of course generates illegal point coordinates, so those are removed using filter, which checks to ensure that the indices lie between -1 and the provided size.”


“(neighbors 3 [1 1])

;;=> ((0 1) (2 1) (1 0) (1 2))
”



“(map #(get-in matrix %) (neighbors 3 [0 0]))
”

******** pop and peek

“The conj function adds elements to, and pop removes elements from, the right side of the stack. Because vectors are immutable, pop returns a new vector with the rightmost item dropped—this is different from many mutable stack APIs, which generally return the dropped item. Consequently, peek becomes more important as the primary way to get an item from the top of the stack:

(def my-stack [1 2 3])
(peek my-stack)

;=> 3
(pop my-stack)

;=> [1 2]
(conj my-stack 4)
;=> [1 2 3 4]

(+ (peek my-stack) (peek (pop my-stack)))
;=> 5”

“Any object that implements clojure.lang.IPersistentStack[7] can use the functions conj, pop, and peek. In addition to vectors, Clojure lists also implement this interface, but the functions operate on the left side of lists instead of the right side as with vectors. When operating on either via the stack discipline, it’s best to ignore the ordering, because it tends to add confusion.”

Excerpt From: Michael Fogus Chris Houser. “The Joy of Clojure, Second Edition.” iBooks.

******** subvec

“(subvec a-to-j 3 6)
;=> [\D \E \F]”

******** vecs and maps 

“(doseq [[dimension amount] {:width 10, :height 20, :depth 15}]
  (println (str (name dimension) ":") amount "inches"))
; width: 10 inches
; height: 20 inches
; depth: 15 inches
;=> nil”

Excerpt From: Michael Fogus Chris Houser. “The Joy of Clojure, Second Edition.” iBooks.

******** finding element in a sequence

“(some #{:b} [:a 1 :b 2])
;=> :b

(some #{1 :b} [:a 1 :b 2])
;=> 1”

******* sets

******** sorted sets

“
(sorted-set :b 2 :c :a 3 1)
; java.lang.ClassCastException: clojure.lang.Keyword cannot be cast to
     java.lang.Number”

****** find position of element in a sequence

******* requirements

“Work on any collection type, returning indices corresponding to some value
Return a numerical index for sequential collections or associated key for maps and sets”

Otherwise return nil”

******* step 1 -- generate index

“(defn index [coll]
  (cond
    (map? coll) (seq coll)
    (set? coll) (map vector coll coll)
    :else (map vector (iterate inc 0) coll)))”

******* pos

“(defn pos [e coll]
  (for [[i v] (index coll) :when (= e v)] i))”

******** slight improvement so can pass predicate fn

“(pos #{3 4} {:a 1 :b 2 :c 3 :d 4})
;=> (:c :d)

(pos even? [2 3 6 7])
;=> (0 2)
We can modify pos only slightly to achieve the ideal level of flexibility.

Listing 5.3. Final version of pos
(defn pos [pred coll]
 (for [[i v] (index coll) :when (pred v)] i))”

* log 17:09:17

** css transition group in reagent

* October 12, 2016

** log
06:37:06
break
07:09:46

try to load query dynamically
successfully have a macro-generated multi-arity child query

07:28:19

*** macro query


what api I want


 
#+BEGIN_SRC clojure
  {:find find
   :q-for [x ["A" "B" "C"]]
   :in $ % arg-vec
   :where 
   (qfor [x arg-vec
          :let [xid (str x id)]]
       


#+END_SRC

 

#+BEGIN_SRC clojure
  (for [i (range 20)]
    "a")

#+END_SRC

***  08:08:00

overtone

* October 13, 2016

** 14:45:45

is it possible to do a datascript query using aggregates -- namely, count

(d/q '[:find ?director ?movies 
       :where
       [?d :person/name ?director]
       (< 3 (count ?movies))
       [?movies :movie/director ?d]
       [?movies :movie/title _]]
     @conn)

** 23:35:41

(deftest test-dual-recursion
  (let [empty (d/empty-db {:part { :db/valueType :db.type/ref }
                           :spec { :db/valueType :db.type/ref }})]
    (let [db (d/db-with empty [[:db/add 1 :part 2]
                               [:db/add 2 :part 3]
                               [:db/add 3 :part 1]
                               [:db/add 1 :spec 2]
                               [:db/add 2 :spec 1]])]
      (is (= (d/pull db '[:db/id {:part ...} {:spec ...}] 1)
             {:db/id 1,
              :spec {:db/id 2
                     :spec {:db/id 1,
                            :spec {:db/id 2}, :part {:db/id 2}}
                     :part {:db/id 3,
                            :part {:db/id 1,
                                   :spec {:db/id 2},
                                   :part {:db/id 2}}}}
              :part {:db/id 2
                     :spec {:db/id 1, :spec {:db/id 2}, :part {:db/id 2}}
                     :part {:db/id 3,
                            :part {:db/id 1,
                                   :spec {:db/id 2},
                                   :part {:db/id 2}}}}})))))







(deftest test-pull-default
  (testing "Empty results return nil"
    (is (nil? (d/pull test-db '[:foo] 1))))

  (testing "A default can be used to replace nil results"
    (is (= {:foo "bar"}
           (d/pull test-db '[(default :foo "bar")] 1)))))



   (testing "Multiple recursion specs in one pattern"
      (is (= enemies (d/pull db '[:db/id :name {:friend 2 :enemy 2}] 4))))


    (testing "Infinite recursion"
      (is (= friends (d/pull db '[:db/id :name {:friend ...}] 4))))



(deftest test-entity
  (let [db (-> (d/empty-db {:aka {:db/cardinality :db.cardinality/many}})
               (d/db-with [{:db/id 1, :name "Ivan", :age 19, :aka ["X" "Y"]}
                           {:db/id 2, :name "Ivan", :sex "male", :aka ["Z"]}]))
        e  (d/entity db 1)]
    (is (= (:db/id e) 1))
    (is (identical? (d/entity-db e) db))
    (is (= (:name e) "Ivan"))
    (is (= (e :name) "Ivan")) ; IFn form
    (is (= (:age  e) 19))
    (is (= (:aka  e) #{"X" "Y"}))
    (is (= true (contains? e :age)))
    (is (= false (contains? e :not-found)))
    (is (= (into {} e)
           {:name "Ivan", :age 19, :aka #{"X" "Y"}}))
    (is (= (into {} (d/entity db 1))
           {:name "Ivan", :age 19, :aka #{"X" "Y"}}))
    (is (= (into {} (d/entity db 2))
           {:name "Ivan", :sex "male", :aka #{"Z"}}))

    (is (= (pr-str (d/entity db 1)) "{:db/id 1}"))
    (is (= (pr-str (let [e (d/entity db 1)] (:unknown e) e)) "{:db/id 1}"))
    ;; read back in to account for unordered-ness
    (is (= (edn/read-string (pr-str (let [e (d/entity db 1)] (:name e) e)))
(edn/read-string "{:name \"Ivan\", :db/id 1}")))))

* October 14, 2016

** 13:37:00
to 13:56:44 setup

** 13:56:49 -- 15:03:08
meditation
and figuring out how to posh vs deftrack work with q

** 15:03:30 -- 19:14:17
sanj time
reading, stretching

** 19:15:07 -- 20:21:59

parents and children

got it working, now just have to animate it and make it look good

and tie in a full view

**  20:22:34

break

* October 15, 2016

** 09:10:56

get a simple persistence list going on actual roamana site

09:20:34

* October 23, 2016

** 09:22:09

boot https://github.com/adzerk-oss/boot-beanstalk

** simuluation argument



*** Aruguments

*** Premise

**** given: You don't need to simulate the whole universe each time

**** given: Posthumans will have sufficent computing capacity to run




***** really:  It is possible to simulate at this level

****** Counter Arguments

******* Information Density

I would estimate at least 1e26 operations per second for a human mind, if our consciousness is purely algorithmic. If consciousness is even partially physical phenomena (which I suspect it is), you might have to calculate the actual participating physical particles and their interactions.

About 10-20 grams of human is 6e23 molecules, so a brain would be about 6e25 molecules, and one molecule might require 1e20 calculations per second (or more perhaps quantum calculations).

So the planet sized computer might struggle producing even one conscious human mind, since one conscious second might take 6e47 calculations, and the computer was able to perform only 1e42 per second.

So one second of your conscious experience might take one week to recreate even with a planet sized computer.

Also the speed of light causes serious limitations for planet sized computers. It takes 0.13 seconds for light to travel around the globe! If this is not taken into account, the power of the computer may be magnitudes less than advertised.

So if consciousness is physical phenomena, simulations have huge disadvantages compared to actual beings, and we are more likely real, than a week per second planetary computers.

******** You may not need to simulate every molecule in the brain

******** Time only needs to be consistent for the observer

******* Lossy Compression

******** A universe is not able to simulate itself



**** Substrate Independent Consciouness

*** Conclusion

**** Either

***** We never reach posthuman state

***** We won't want to create simulations

***** Or, we're already living in a simulation, and physics of base reality may be much different

** 19:50:57

*** datascript subs
[[file:~/src/examples/datascript/test/datascript/test/query_fns.cljc::(testing%20"Built-ins"][query-fns]] 

subs 
[(subs ?word 0 5) ?prefix]

* October 26, 2016

** Faceted Classification examples

https://www.flickr.com/photos/morville/sets/72157603994869658/

* October 27, 2016

** 06:44:11

:set/title "Type"



:set/title "Creation"
:set/prototype "Type"
:set/attributes "Creator", "Created-at"


:set/title "Poem"
:set/prototype "Creation"
:attribute/transformations {:attribute/original "Creator", :attribute/relabeled "Author"}

** 12:45:21 reminder on queries

Reminder -- when you're doing OR filtering, just get back the results from whole db, then apply set on filter combinations
Use the queries for your ORs, and set/intersection for the ands

** 13:32:45

note -- the way I'm doing subsets in the filter won't scale
I'm treating Hafiz as a subset of Poets -- he really should be a member
but in this case, I want to filter on him, so he's getting treated as a subset
not the worst violation 

basically, the only thing that are "members" right now are the poems

long term, I'll need to straighten that out, so that, rather than looking for members
you just take the base "type", and you look for the elements that have those, and treat those as members rather than subsets

** 14:39:54


Nice helpers

(defn constrain [v min-v max-v]
  (cond (< v min-v) min-v
        (> v max-v) max-v
        :else v))

(defn e->translation [e {:keys [mouse-start-state elem-start-state]}]
  (let [[delta-x delta-y] (mouse-delta e mouse-start-state)]
    {:x (constrain (+ (:x elem-start-state) delta-x) 0 (:canvas-width config))
     :y (constrain (+ (:y elem-start-state) delta-y) 0 (:canvas-height config))}))




(defn drag-move [e]
  (when (:dragging (selected-elem))
    (swap-selected-elem! merge (e->translation e @transients))))

(defn drag-end [e]
  (when (:dragging (selected-elem))
    (swap-selected-elem! merge (e->translation e @transients) {:dragging false})
    (set-cursor! :auto)))






;;; also potentially useful

;;; alll from here https://github.com/yayitswei/t-edit/blob/master/src/tedit/core.cljs

(defn dominant [f values]
  (apply (partial max-key Math/abs) values))

(defn e->scale [e {:keys [mouse-start-state elem-start-state]}]
  (let [deltas (mouse-delta e mouse-start-state)]
    #_(swap! debug merge {:font-size new-font-size :deltas (print-str deltas)
                        :dominant-delta (dominant Math/abs deltas)})
    (case (:type elem-start-state)
      :text {:font-size (max (+ (:font-size elem-start-state)
                                (dominant Math/abs deltas)) 10)}
      :art {:scale (max (+ (:scale elem-start-state)
                           (/ (dominant Math/abs deltas) 100)) 0.1)})))

** 14:45:51 better draggable example

https://github.com/borkdude/draggable-button-in-reagent/blob/master/src-cljs/drag/main.cljs


now.. this is pretttyyy gnarly in some ways, quite low level
but... that has tradeoffs good and bad --- what is droppable?

* November 3, 2016

** 14:36:23 -- 15:35:37 takeoff

** 15:35:47 -- 15:43:37 - got a basic options off of multi-select working




















    





























